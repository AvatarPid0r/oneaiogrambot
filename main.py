import asyncio
from aiogram import Dispatcher, executor, types, Bot
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import CallbackQuery, ParseMode
from aiogram.utils.exceptions import ChatNotFound, ChatIdIsEmpty
import sqlite3 as sq
from config import token
from State import TextState, EditsText, AddsGroups, DeleteGroups, SaveInterval
from sqilite import add_user, edit_user_text, add_groupss, delete_groups
from keyboards import cm_start, inline_st, cancel

storage = MemoryStorage()
bot = Bot(token)
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    add_user(user_id)
    await message.answer('''
<b>–ü—Ä–∏–≤–µ—Ç</b>üëã
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ —á–∞—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. 
–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –≤–∞–º –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã, –∞ –∑–∞—Ç–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö, —Å –∫–æ—Ç–æ—Ä—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.''',
                         reply_markup=await cm_start(), parse_mode='HTML')


@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç')
async def add_text(message: types.Message, state: FSMContext):
    await message.answer('–ù–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç!', reply_markup=await cm_start())
    await TextState.text.set()


@dp.message_handler(state=TextState.text)
async def send_user_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_texts = message.html_text
    await state.finish()
    await message.answer(f'<b>–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–∞–∫–æ–π —Ç–µ–∫—Å—Ç:</b>\n {message.html_text}',
                         reply_markup=await inline_st(), parse_mode='html')
    edit_user_text(user_texts, user_id)


@dp.callback_query_handler(lambda x: x.data == 'edits')
async def inline_edit(callback: CallbackQuery, state: FSMContext):
    await bot.send_message(callback.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç')
    await EditsText.text.set()

@dp.callback_query_handler(lambda x: x.data == 'save')
async def fake_save(callback: CallbackQuery):
    await callback.answer('–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à —Ç–µ–∫—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')

@dp.message_handler(state=EditsText.text)
async def edit_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_texts = message.html_text
    await state.finish()
    await message.answer(f'<b>–í–æ—Ç –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n {message.html_text}',
                         reply_markup=await inline_st(), parse_mode='HTML')
    edit_user_text(user_texts, user_id)


@dp.callback_query_handler(lambda x: x.data == 'send')
async def send_of_groups(callback: CallbackQuery):
    con = sq.connect('DateBase.db')
    cur = con.cursor()
    cur.execute('SELECT user_text, grups FROM users WHERE user_id=?', (callback.from_user.id,))
    result_text = cur.fetchone()
    try:
        if result_text:
            text, groups = result_text
            groups_list = str(groups).replace(' ', '').split(',')
            for group in groups_list:
                try:
                    await bot.send_chat_action(group, "typing")
                    await bot.send_message(chat_id=group, text=text, parse_mode='HTML')
                    await bot.send_message(chat_id=callback.from_user.id, text=f'–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤ –∫–∞–Ω–∞–ª\n {group}')
                except (ChatNotFound):
                    await bot.send_message(chat_id=callback.from_user.id, text=f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª\n {group}')
            con.close()
    except ChatIdIsEmpty:
        await bot.send_message(chat_id=callback.from_user.id, text='–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª')


@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª')
async def add_groups(message: types.Message, state: FSMContext):
    await message.answer('''–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —á–∏—Å–ª–∞ "-100" –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç–æ–π, <b>–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –º–µ–∂–¥—É –Ω–∏–º–∏</b>.

–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: -1001234567891,-1001234567891,-1001234567891. 

–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "-100" –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç–æ–π, –∞ —Ç–∞–∫–∂–µ —á—Ç–æ –º–µ–∂–¥—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –Ω–µ—Ç <b>–ø—Ä–æ–±–µ–ª–æ–≤</b>.''', parse_mode='HTML')
    await AddsGroups.text.set()


@dp.message_handler(state=AddsGroups.text)
async def add_grop(message: types.Message, state: FSMContext):
    group_id = message.text
    user_id = message.from_user.id
    await state.finish()
    if message.text.startswith('-100'):
        with sq.connect('DateBase.db') as con:
            cur = con.cursor()
            cur.execute('SELECT grups FROM users WHERE user_id=?', (user_id,))
            groups = cur.fetchone()[0]
            if groups:
                groups_list = str(groups).replace(' ', '').split(',')
            else:
                groups_list = []
            if group_id not in groups_list:
                add_groupss(group_id, user_id)
                await message.answer('–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
            else:
                await message.answer('–î–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å!')
        con.close()
    else:
        await message.answer('–ü—Ä–∏—à–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å "-100"')


@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É')
async def delet_groups(message: types.Message, state: FSMContext):
    await message.answer('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å')
    await DeleteGroups.text.set()


@dp.message_handler(state=DeleteGroups.text)
async def delete_grop(message: types.Message, state: FSMContext):
    group_id = message.text
    user_id = message.from_user.id
    await state.finish()
    if message.text.startswith('-100'):
        with sq.connect('DateBase.db') as con:
            cur = con.cursor()
            cur.execute('SELECT grups FROM users WHERE user_id=?', (user_id,))
            groups = cur.fetchone()[0]
            if groups:
                groups_list = str(groups).split(',')
            else:
                groups_list = []
            if group_id not in groups_list:
                await message.answer('–î–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑–µ –Ω–µ –Ω–∞—à–ª–æ—Å—å')
            else:
                delete_groups(group_id, user_id)
                await message.answer('–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!')
        con.close()
    else:
        await message.answer('–ü—Ä–∏—à–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å "-100"')


sending = True


@dp.message_handler(content_types=['text'])
async def interval(message: types.Message, state: FSMContext):
    global sending
    if message.text == '–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö', reply_markup=await cancel())
        sending = True
        await SaveInterval.text.set()
    if message.text == '–ú–æ–∏ –∫–∞–Ω–∞–ª—ã':
        with sq.connect('DateBase.db') as con:
            cur = con.cursor()
            cur.execute('SELECT user_text, grups FROM users WHERE user_id=?', (message.from_user.id,))
            result = cur.fetchone()

            if result:
                text, groups = result
                if groups is not None:
                    groups_list = str(groups).replace(' ', '').split(',')
                    groups_send = str(groups_list)[1:-1].replace("'", "").replace(',', '\n').replace(' ', '')
                    await message.answer(f'–í–æ—Ç –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n{groups_send}')
                else:
                    await message.answer('–£ –≤–∞—Å –Ω–µ—Ç—É –∫–∞–Ω–∞–ª–æ–≤!')
        con.close()
    if message.text == '–ú–æ–π —Ç–µ–∫—Å—Ç':
        with sq.connect('DateBase.db') as con:
            cur = con.cursor()
            cur.execute('SELECT user_text, grups FROM users WHERE user_id=?', (message.from_user.id,))
            result = cur.fetchone()

            if result:
                text, groups = result
                if text is not None:
                    await message.answer(f'–í–æ—Ç –≤–∞—à —Ç–µ–∫—Å—Ç:\n{text}', parse_mode='HTML')
                else:
                    await message.answer('–£ –≤–∞—Å –Ω–µ—Ç—É —Ç–µ–∫—Å—Ç–∞!')
        con.close()

@dp.message_handler(state=SaveInterval.text)
async def save_interval(message: types.Message, state=FSMContext):
    global sending
    try:
        if message.text.isdigit():
            await handle_valid_interval(message, state)
        elif message.text == '–û—Ç–º–µ–Ω–∞':
            await message.answer('–û—Ç–º–µ–Ω–∏–ª!', reply_markup=await cm_start())
            sending = False
            await state.finish()
        else:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –º–∏–Ω—É—Ç–∞—Ö.',
                                 reply_markup=await cancel())
    except Exception:
        await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏ ID –∫–∞–Ω–∞–ª–∞!')


async def handle_valid_interval(message: types.Message, state=FSMContext):
    try:
        interval = message.text.strip()
        with sq.connect('DateBase.db') as con:
            cur = con.cursor()
            cur.execute('SELECT user_text, grups FROM users WHERE user_id=?', (message.from_user.id,))
            result = cur.fetchone()
            if result:
                text, groups = result
                groups_list = str(groups).replace(' ', '').split(',')
                groups_send = str(groups_list)[1:-1].replace("'", "").replace(',', '\n').replace(' ', '')
                try:
                    while sending:
                        for group in groups_list:
                            try:
                                await bot.send_message(chat_id=group, text=text, parse_mode='HTML')
                            except ChatNotFound:
                                await bot.send_message(chat_id=message.from_user.id,
                                                       text=f'–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª! {group}')

                        await bot.send_message(chat_id=message.from_user.id,
                                               text=f'–£—Å–ø–µ—à–Ω–æ! –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ {interval} –º–∏–Ω—É—Ç ',
                                               reply_markup=await cancel())
                        await bot.send_message(chat_id=message.from_user.id,
                                               text=f'–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–æ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ {interval} –º–∏–Ω—É—Ç(—É/—ã):\n{groups_send}')
                        await asyncio.sleep(int(interval * 60))
                except asyncio.CancelledError:
                    pass
                finally:
                    await state.finish()
            else:
                await bot.send_message(chat_id=message.from_user.id,
                                       text='–£ –≤–∞—Å –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ')
        con.close()
    except Exception as e:
        await bot.send_message(chat_id=message.from_user.id,
                               text='–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª!',
                               reply_markup=await cm_start())
async def on_startup(dp):
    print('''
‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñë‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñÄ‚ñà‚ñÄ‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà
‚ñà‚ñÑ‚ñà‚ÄÉ‚ñë‚ñà‚ñë‚ÄÉ‚ñÑ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñÄ‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñë‚ñà‚ñë‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ''')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

